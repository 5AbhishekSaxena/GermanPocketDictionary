// Generated by Dagger (https://dagger.dev).
package com.abhishek.germanPocketDictionary.ui.agreement.domain.repository;

import com.abhishek.germanPocketDictionary.ui.agreement.utils.AgreementLoader;
import com.abhishek.germanPocketDictionary.ui.agreement.utils.AgreementPreferenceManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AgreementRepositoryImpl_Factory implements Factory<AgreementRepositoryImpl> {
  private final Provider<AgreementLoader> agreementLoaderProvider;

  private final Provider<AgreementPreferenceManager> agreementPreferenceManagerProvider;

  public AgreementRepositoryImpl_Factory(Provider<AgreementLoader> agreementLoaderProvider,
      Provider<AgreementPreferenceManager> agreementPreferenceManagerProvider) {
    this.agreementLoaderProvider = agreementLoaderProvider;
    this.agreementPreferenceManagerProvider = agreementPreferenceManagerProvider;
  }

  @Override
  public AgreementRepositoryImpl get() {
    return newInstance(agreementLoaderProvider.get(), agreementPreferenceManagerProvider.get());
  }

  public static AgreementRepositoryImpl_Factory create(
      Provider<AgreementLoader> agreementLoaderProvider,
      Provider<AgreementPreferenceManager> agreementPreferenceManagerProvider) {
    return new AgreementRepositoryImpl_Factory(agreementLoaderProvider, agreementPreferenceManagerProvider);
  }

  public static AgreementRepositoryImpl newInstance(AgreementLoader agreementLoader,
      AgreementPreferenceManager agreementPreferenceManager) {
    return new AgreementRepositoryImpl(agreementLoader, agreementPreferenceManager);
  }
}
